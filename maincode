#!/usr/bin/env bash

# ------------------------------------------------------------
#   worklog_pomodoro.sh
#   Pomodoro timer ─ 25‑min work / 5‑min break loops.
#   Logs to $HOME/.worklog_pomodoro/YYYY‑MM‑DD.csv
#   On stop: prints completed cycles & total focused minutes.
#   Usage : worklog_pomodoro.sh {start|stop|status}
# ------------------------------------------------------------
set -euo pipefail
export TZ='Asia/Tokyo'

# --- CONFIG -------------------------------------------------
LOGDIR="$HOME/.worklog_pomodoro"        # ← 保存先
PIDFILE="$LOGDIR/pid"                  # ← 実行中 PID
WORK_SEC=$((1*60))   # 作業 25 分（秒） #あとで25に変更
BREAK_SEC=$((1*60))   # 休憩  5 分（秒） #あとで5に変更
# ------------------------------------------------------------

mkdir -p "$LOGDIR"
LOGFILE="$LOGDIR/$(date +%F).csv"

# 1 行メッセージ
msg(){ printf '%s\n' "$*"; }

start() {
  # 二重起動チェック
  if [[ -f $PIDFILE ]] && kill -0 "$(<"$PIDFILE")" 2>/dev/null; then
    msg "Already running (PID $(<"$PIDFILE"))."; return 1; fi

  msg "Pomodoro started 🚀 (work $((WORK_SEC/60))min / break $((BREAK_SEC/60))min)"
  echo "$(date '+%F %T'),SESSION_START" >>"$LOGFILE"

  # サブシェルでバックグラウンド実行
  (
    trap 'rm -f "$PIDFILE"; exit' INT TERM EXIT  # 後片付け

    # サイクルカウンターを初期化
    declare -i cycle_count=1

    while true; do
      # その日の累積サイクル数を計算
      total_today=$(grep -c ',WORK_END' "$LOGFILE" 2>/dev/null || echo "0")
      if ! [[ "$total_today" =~ ^[0-9]+$ ]]; then total_today=0; fi
      next_cycle=$((total_today + cycle_count))

      echo "$(date '+%F %T'),WORK_START"  >>"$LOGFILE"
      msg "[$(date '+%H:%M')] 🍅 Cycle ${next_cycle} (Session ${cycle_count}): Work session started!"
      sleep "$WORK_SEC"
      echo "$(date '+%F %T'),WORK_END"    >>"$LOGFILE"
      msg "[$(date '+%H:%M')] ✅ Cycle ${next_cycle} completed — take 5‑min break!"

      echo "$(date '+%F %T'),BREAK_START" >>"$LOGFILE"
      sleep "$BREAK_SEC"
      echo "$(date '+%F %T'),BREAK_END"   >>"$LOGFILE"
      msg "[$(date '+%H:%M')] ☕ Break over — starting next work session!"

      # サイクル完了後にカウンターを増加
      cycle_count=$((cycle_count + 1))
    done
  ) &
  
  # バックグラウンドプロセスのPIDを記録
  echo $! >"$PIDFILE"
}
stop() {
  if [[ ! -f $PIDFILE ]]; then msg "No active work session."; return; fi

  pid=$(<"$PIDFILE")
  
  # 親プロセスを終了
  kill "$pid" 2>/dev/null || true
  
  # 子プロセスも含めて終了
  pkill -P "$pid" 2>/dev/null || true
  
  # PIDファイルを削除
  rm -f "$PIDFILE"
  
  echo "$(date '+%F %T'),SESSION_END" >>"$LOGFILE"

  # 作業サイクル数と合計時間を計算
  cycles=$(grep -c ',WORK_END' "$LOGFILE" || true)
  total_min=$((cycles * 25))
  total_hour=$((cycles * 25 / 60))
  
  # 結果を表示
  msg "Completed cycles : $cycles"
  msg "Total focus time : ${total_min} min (${total_hour} hour )"
}
status() {
  if [[ -f $PIDFILE ]] && kill -0 "$(<"$PIDFILE")" 2>/dev/null; then
    msg "Work session running (PID $(<"$PIDFILE")).";
  else
    msg "No active work session."; fi
}

case ${1:-} in
  start)  start  ;;
  stop)   stop   ;;
  status) status ;;
  *) msg "Usage: $0 {start|stop|status}"; exit 1 ;;
 esac
