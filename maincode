#!/usr/bin/env bash

# ------------------------------------------------------------
#   worklog_pomodoro.sh
#   Pomodoro timer ─ 25‑min work / 5‑min break loops.
#   Logs to $HOME/.worklog_pomodoro/YYYY‑MM‑DD.csv
#   On stop: prints completed cycles & total focused minutes.
#   Usage : worklog_pomodoro.sh {start|stop|status}
# ------------------------------------------------------------
set -euo pipefail
export TZ='Asia/Tokyo'

# --- CONFIG -------------------------------------------------
LOGDIR="$HOME/.worklog_pomodoro"        # ← 保存先
PIDFILE="$LOGDIR/pid"                  # ← 実行中 PID
WORK_SEC=$((1*60))   # 作業 25 分（秒） #あとで25に変更
BREAK_SEC=$((1*60))   # 休憩  5 分（秒） #あとで5に変更
# ------------------------------------------------------------

mkdir -p "$LOGDIR"
LOGFILE="$LOGDIR/$(date +%F).csv"

# 1 行メッセージ
msg(){ printf '%s\n' "$*"; }

# デスクトップ通知関数
notify() {
  local message="$1"
  osascript -e "display notification \"$message\" with title \"Pomodoro Timer\""
}

start() {
  # 二重起動チェック
  if [[ -f $PIDFILE ]] && kill -0 "$(<"$PIDFILE")" 2>/dev/null; then
    msg "Already running (PID $(<"$PIDFILE"))."; return 1; fi

  msg "Pomodoro started 🚀 (work $((WORK_SEC/60))min / break $((BREAK_SEC/60))min)"
  notify "Pomodoro started 🚀 Work: $((WORK_SEC/60)) min, Break: $((BREAK_SEC/60)) min"
  echo "$(date '+%F %T'),SESSION_START" >>"$LOGFILE"

  # サブシェルでバックグラウンド実行
  (
    trap 'rm -f "$PIDFILE"; exit' INT TERM EXIT  # 後片付け

    # サイクルカウンターを初期化
    declare -i cycle_count=1

    while true; do
      # その日の累積サイクル数を計算
      total_today=$(grep -c ',WORK_END' "$LOGFILE" 2>/dev/null || echo "0")
      if ! [[ "$total_today" =~ ^[0-9]+$ ]]; then total_today=0; fi
      next_cycle=$((total_today + cycle_count))

      echo "$(date '+%F %T'),WORK_START"  >>"$LOGFILE"
      msg "[$(date '+%H:%M')] 🍅 Cycle ${next_cycle} (Session ${cycle_count}): Work session started!"
      notify "🍅 Cycle ${next_cycle}: Work session started!"
      sleep "$WORK_SEC"

      echo "$(date '+%F %T'),WORK_END"    >>"$LOGFILE"
      msg "[$(date '+%H:%M')] ✅ Cycle ${next_cycle} completed — take 5‑min break!"
      notify "✅ Cycle ${next_cycle} completed — take a 5‑min break!"
      sleep "$BREAK_SEC"

      echo "$(date '+%F %T'),BREAK_END"   >>"$LOGFILE"
      msg "[$(date '+%H:%M')] 🕒 Break over — starting next cycle!"
      notify "🕒 Break over — starting next cycle!"
      cycle_count+=1
    done
  ) &
  echo "$!" >"$PIDFILE"
}

stop() {
  if [[ -f $PIDFILE ]] && kill -0 "$(<"$PIDFILE")" 2>/dev/null; then
    kill "$(<"$PIDFILE")" && rm -f "$PIDFILE"
    msg "Pomodoro stopped."
    notify "Pomodoro stopped."
    echo "$(date '+%F %T'),SESSION_STOP" >>"$LOGFILE"
  else
    msg "Pomodoro is not running."
  fi
}

status() {
  if [[ -f $PIDFILE ]] && kill -0 "$(<"$PIDFILE")" 2>/dev/null; then
    msg "Pomodoro is running (PID $(<"$PIDFILE"))."
  else
    msg "Pomodoro is not running."
  fi
}

case "$1" in
  start) start ;;
  stop) stop ;;
  status) status ;;
  *) msg "Usage: $0 {start|stop|status}" ;;
esac
